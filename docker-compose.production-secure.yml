version: '3.8'

services:
  # Secure PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: upcoach-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - internal
    security_opt:
      - no-new-privileges:true
    user: postgres
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    command: |
      postgres
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/server.crt
      -c ssl_key_file=/var/lib/postgresql/server.key
      -c log_connections=on
      -c log_disconnections=on
      -c log_statement=all
      -c shared_preload_libraries=pg_stat_statements
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Secure Redis Cache
  redis:
    image: redis:7-alpine
    container_name: upcoach-redis-prod
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - internal
    security_opt:
      - no-new-privileges:true
    user: redis
    read_only: true
    tmpfs:
      - /tmp
    command: |
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Secure API Service
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    container_name: upcoach-api-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=require
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      MASTER_KEY: ${MASTER_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - internal
      - external
    security_opt:
      - no-new-privileges:true
    user: node
    read_only: true
    tmpfs:
      - /tmp
      - /app/tmp
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    ulimits:
      nproc: 1024
      nofile: 4096
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.upcoach.ai`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"

  # Secure Admin Panel
  admin-panel:
    build:
      context: ./apps/admin-panel
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    container_name: upcoach-admin-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_URL: https://api.upcoach.ai
      VITE_APP_URL: https://admin.upcoach.ai
    networks:
      - external
    security_opt:
      - no-new-privileges:true
    user: nginx
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`admin.upcoach.ai`)"
      - "traefik.http.routers.admin.tls=true"
      - "traefik.http.routers.admin.tls.certresolver=letsencrypt"

  # Secure CMS Panel
  cms-panel:
    build:
      context: ./apps/cms-panel
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    container_name: upcoach-cms-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_URL: https://api.upcoach.ai
      VITE_CMS_URL: https://cms.upcoach.ai
    networks:
      - external
    security_opt:
      - no-new-privileges:true
    user: nginx
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cms.rule=Host(`cms.upcoach.ai`)"
      - "traefik.http.routers.cms.tls=true"
      - "traefik.http.routers.cms.tls.certresolver=letsencrypt"

  # Secure Landing Page
  landing-page:
    build:
      context: ./apps/landing-page
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    container_name: upcoach-landing-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.upcoach.ai
      NEXT_PUBLIC_APP_URL: https://upcoach.ai
    networks:
      - external
    security_opt:
      - no-new-privileges:true
    user: nextjs
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.landing.rule=Host(`upcoach.ai`) || Host(`www.upcoach.ai`)"
      - "traefik.http.routers.landing.tls=true"
      - "traefik.http.routers.landing.tls.certresolver=letsencrypt"

  # Secure Reverse Proxy with Traefik
  traefik:
    image: traefik:v3.0
    container_name: upcoach-traefik-prod
    restart: unless-stopped
    command:
      - "--api.dashboard=false"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--global.sendanonymoususage=false"
      - "--log.level=WARN"
      - "--accesslog=true"
      - "--accesslog.format=json"
      - "--metrics.prometheus=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
    networks:
      - external
    security_opt:
      - no-new-privileges:true
    user: traefik
    read_only: true
    tmpfs:
      - /tmp
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  # Security Monitoring with Fail2Ban
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: upcoach-fail2ban-prod
    restart: unless-stopped
    environment:
      TZ: UTC
      F2B_LOG_LEVEL: INFO
      F2B_DB_PURGE_AGE: 1d
    volumes:
      - ./fail2ban:/data
      - /var/log:/var/log:ro
    networks:
      - external
    security_opt:
      - no-new-privileges:true
    cap_add:
      - NET_ADMIN
      - NET_RAW

  # Log Management with Fluent Bit
  fluent-bit:
    image: fluent/fluent-bit:2.2
    container_name: upcoach-logging-prod
    restart: unless-stopped
    volumes:
      - ./logging/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    networks:
      - internal
    security_opt:
      - no-new-privileges:true
    user: fluent-bit
    read_only: true
    tmpfs:
      - /tmp

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: upcoach-prometheus-prod
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - internal
    security_opt:
      - no-new-privileges:true
    user: prometheus
    read_only: true
    tmpfs:
      - /tmp
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

networks:
  internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.0.0/16
  external:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  letsencrypt_data:
    driver: local
  prometheus_data:
    driver: local