# Removed version as it's obsolete in Compose Spec

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: upcoach-postgres
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-upcoach}
      POSTGRES_USER: ${DB_USER:-upcoach}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: 200
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-backup.sh:/usr/local/bin/backup.sh:ro
    # Remove exposed ports - database should only be accessible via internal network
    # ports:
    #   - "5432:5432"
    networks:
      - upcoach-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-upcoach}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: upcoach-redis
    restart: always
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    # Remove exposed ports - Redis should only be accessible via internal network
    # ports:
    #   - "6379:6379"
    networks:
      - upcoach-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Backend API
  backend:
    build:
      context: ./services/api
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    # container_name removed to allow replicas
    restart: always
    environment:
      NODE_ENV: production
      PORT: 8080
      DATABASE_URL: postgresql://${DB_USER:-upcoach}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-upcoach}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENABLED: true
      DD_ENABLED: true
      DD_API_KEY: ${DD_API_KEY}
      DD_APP_KEY: ${DD_APP_KEY}
      DD_SERVICE: upcoach-api
      DD_ENV: production
      DD_VERSION: ${APP_VERSION:-1.0.0}
      DD_AGENT_HOST: datadog-agent
      DD_TRACE_AGENT_PORT: 8126
      DD_RUNTIME_METRICS: true
      DD_PROFILING_ENABLED: true
      APP_VERSION: ${APP_VERSION:-1.0.0}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - upcoach-network
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Removed container_name to allow replicas
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Admin Panel
  admin-panel:
    build:
      context: ./apps/admin-panel
      dockerfile: Dockerfile.production
      args:
        VITE_API_URL: ${API_URL:-https://api.upcoach.ai}
        VITE_APP_ENV: production
    # container_name removed to allow replicas
    restart: always
    environment:
      NODE_ENV: production
      VITE_API_URL: ${API_URL:-https://api.upcoach.ai}
      VITE_SENTRY_DSN: ${ADMIN_SENTRY_DSN}
    ports:
      - "8006:80"
    networks:
      - upcoach-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # CMS Panel
  cms-panel:
    build:
      context: ./cms-panel
      dockerfile: Dockerfile.production
      args:
        VITE_API_URL: ${API_URL:-https://api.upcoach.ai}
        VITE_APP_ENV: production
    # container_name removed to allow replicas
    restart: always
    environment:
      NODE_ENV: production
      VITE_API_URL: ${API_URL:-https://api.upcoach.ai}
      VITE_SENTRY_DSN: ${CMS_SENTRY_DSN}
    ports:
      - "8007:80"
    networks:
      - upcoach-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Landing Page
  landing-page:
    build:
      context: ./apps/landing-page
      dockerfile: Dockerfile.production
      args:
        NEXT_PUBLIC_API_URL: ${API_URL:-https://api.upcoach.ai}
        NEXT_PUBLIC_APP_ENV: production
    # container_name removed to allow replicas
    restart: always
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${API_URL:-https://api.upcoach.ai}
      NEXT_PUBLIC_SENTRY_DSN: ${LANDING_SENTRY_DSN}
    ports:
      - "8005:3000"
    networks:
      - upcoach-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: upcoach-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - upcoach-network
    depends_on:
      - backend
      - admin-panel
      - cms-panel
      - landing-page
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # DataDog Agent
  datadog-agent:
    image: datadog/agent:latest
    container_name: upcoach-datadog
    restart: always
    environment:
      DD_API_KEY: ${DD_API_KEY}
      DD_SITE: datadoghq.com
      DD_LOGS_ENABLED: true
      DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: true
      DD_CONTAINER_EXCLUDE: "name:datadog-agent"
      DD_APM_ENABLED: true
      DD_APM_NON_LOCAL_TRAFFIC: true
      DD_PROCESS_AGENT_ENABLED: true
      DD_SYSTEM_PROBE_ENABLED: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - datadog_data:/opt/datadog-agent/run
    networks:
      - upcoach-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: upcoach-prometheus
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - upcoach-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: upcoach-grafana
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    networks:
      - upcoach-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Backup service
  backup:
    build:
      context: ./scripts
      dockerfile: Dockerfile.backup
    container_name: upcoach-backup
    restart: always
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${DB_NAME:-upcoach}
      POSTGRES_USER: ${DB_USER:-upcoach}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      S3_BUCKET: ${BACKUP_S3_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      RETENTION_DAYS: 30
    volumes:
      - backup_data:/backups
    networks:
      - upcoach-network
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  upcoach-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  datadog_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  backup_data:
    driver: local