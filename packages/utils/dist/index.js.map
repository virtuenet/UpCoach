{"version":3,"sources":["../src/index.ts"],"names":["deepClone","obj","Date","getTime","Array","map","item","cloned","key","hasOwnProperty","deepMerge","objects","result","val","isArray","sleep","ms","Promise","resolve","setTimeout","retry","fn","options","retries","delay","maxDelay","factor","onRetry","lastError","currentDelay","i","error","Math","min","memoize","getKey","cache","Map","args","JSON","stringify","has","get","set","RateLimiter","maxConcurrent","interval","queue","running","execute","waitForSlot","processQueue","push","length","shift","singleton","factory","instance","safeJsonParse","json","fallback","parse","getEnv","defaultValue","value","process","env","undefined","Error","isBrowser","window","isProduction","NODE_ENV","isDevelopment","isTest"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @upcoach/utils\n * Shared utility functions\n */\n\n// Additional utility functions\n\n/**\n * Deep clone an object\n */\nexport function deepClone<T>(obj: T): T {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (obj instanceof Date) return new Date(obj.getTime()) as any;\n  if (obj instanceof Array) return obj.map(item => deepClone(item)) as any;\n\n  const cloned = {} as T;\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      cloned[key] = deepClone(obj[key]);\n    }\n  }\n  return cloned;\n}\n\n/**\n * Deep merge objects\n */\nexport function deepMerge<T extends Record<string, any>>(...objects: Partial<T>[]): T {\n  const result = {} as T;\n\n  for (const obj of objects) {\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const val = obj[key];\n        if (val !== null && typeof val === 'object' && !Array.isArray(val)) {\n          result[key] = deepMerge(result[key] || {}, val);\n        } else {\n          result[key] = val as any;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Sleep/delay function\n */\nexport const sleep = (ms: number): Promise<void> => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Retry function with exponential backoff\n */\nexport async function retry<T>(\n  fn: () => Promise<T>,\n  options: {\n    retries?: number;\n    delay?: number;\n    maxDelay?: number;\n    factor?: number;\n    onRetry?: (error: Error, attempt: number) => void;\n  } = {}\n): Promise<T> {\n  const { retries = 3, delay = 1000, maxDelay = 10000, factor = 2, onRetry } = options;\n\n  let lastError: Error;\n  let currentDelay = delay;\n\n  for (let i = 0; i <= retries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n\n      if (i < retries) {\n        if (onRetry) {\n          onRetry(lastError, i + 1);\n        }\n\n        await sleep(currentDelay);\n        currentDelay = Math.min(currentDelay * factor, maxDelay);\n      }\n    }\n  }\n\n  throw lastError!;\n}\n\n/**\n * Memoize function\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  getKey?: (...args: Parameters<T>) => string\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>) => {\n    const key = getKey ? getKey(...args) : JSON.stringify(args);\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n\n    const result = fn(...args);\n    cache.set(key, result);\n    return result;\n  }) as T;\n}\n\n/**\n * Rate limiter\n */\nexport class RateLimiter {\n  private queue: Array<() => void> = [];\n  private running = 0;\n\n  constructor(\n    private maxConcurrent: number,\n    private interval: number\n  ) {}\n\n  async execute<T>(fn: () => Promise<T>): Promise<T> {\n    await this.waitForSlot();\n\n    try {\n      this.running++;\n      return await fn();\n    } finally {\n      this.running--;\n      this.processQueue();\n    }\n  }\n\n  private waitForSlot(): Promise<void> {\n    return new Promise(resolve => {\n      if (this.running < this.maxConcurrent) {\n        resolve();\n      } else {\n        this.queue.push(resolve);\n      }\n    });\n  }\n\n  private processQueue() {\n    if (this.queue.length > 0 && this.running < this.maxConcurrent) {\n      const resolve = this.queue.shift();\n      if (resolve) {\n        setTimeout(resolve, this.interval);\n      }\n    }\n  }\n}\n\n/**\n * Create a singleton instance\n */\nexport function singleton<T>(factory: () => T): () => T {\n  let instance: T | undefined;\n\n  return () => {\n    if (!instance) {\n      instance = factory();\n    }\n    return instance;\n  };\n}\n\n/**\n * Parse JSON safely\n */\nexport function safeJsonParse<T = any>(json: string, fallback?: T): T | undefined {\n  try {\n    return JSON.parse(json);\n  } catch {\n    return fallback;\n  }\n}\n\n/**\n * Environment variable getter with type safety\n */\nexport function getEnv(key: string, defaultValue?: string): string {\n  const value = process.env[key];\n\n  if (value === undefined && defaultValue === undefined) {\n    throw new Error(`Environment variable ${key} is not defined`);\n  }\n\n  return value ?? defaultValue!;\n}\n\n/**\n * Check if running in browser\n */\nexport const isBrowser = typeof window !== 'undefined';\n\n/**\n * Check if running in production\n */\nexport const isProduction = process.env.NODE_ENV === 'production';\n\n/**\n * Check if running in development\n */\nexport const isDevelopment = process.env.NODE_ENV === 'development';\n\n/**\n * Check if running in test\n */\nexport const isTest = process.env.NODE_ENV === 'test';\n"]}