{"version":3,"sources":["../../../shared/utils/index.ts","../src/index.ts"],"names":["dateUtils","formatDate","date","format","d","Date","isNaN","getTime","toLocaleDateString","year","month","day","hour","minute","toISOString","getRelativeTime","now","diff","seconds","Math","floor","minutes","hours","days","months","years","isToday","today","toDateString","addDays","result","setDate","getDate","getDateRange","start","end","dates","current","endDate","push","stringUtils","truncate","str","maxLength","suffix","length","substring","slugify","toLowerCase","trim","replace","capitalize","charAt","toUpperCase","slice","camelToTitle","s","snakeToCamel","_","letter","camelToSnake","generateId","chars","i","random","numberUtils","formatNumber","num","toLocaleString","formatCurrency","amount","currency","Intl","NumberFormat","style","formatPercent","value","decimals","toFixed","formatBytes","bytes","k","dm","sizes","log","parseFloat","pow","clamp","min","max","round","factor","arrayUtils","chunk","array","size","chunks","unique","Set","groupBy","key","reduce","groups","item","group","String","sortBy","order","sort","a","b","aVal","bVal","shuffle","shuffled","j","objectUtils","deepClone","obj","Array","map","cloned","hasOwnProperty","deepMerge","objects","val","isArray","pick","keys","picked","omit","isEmpty","Object","validationUtils","isEmail","email","re","test","isURL","url","URL","isPhone","phone","isStrongPassword","password","errors","valid","browserUtils","copyToClipboard","text","navigator","clipboard","writeText","textarea","document","createElement","position","opacity","body","appendChild","select","success","execCommand","removeChild","downloadFile","data","filename","type","blob","Blob","createObjectURL","href","download","click","revokeObjectURL","getQueryParams","params","searchParams","URLSearchParams","window","location","search","forEach","setQueryParams","newUrl","pathname","toString","history","pushState","debounce","func","wait","timeout","args","clearTimeout","setTimeout","throttle","lastCall","sleep","ms","Promise","resolve","retry","fn","options","retries","delay","maxDelay","onRetry","lastError","currentDelay","error","memoize","getKey","cache","Map","JSON","stringify","has","get","set","RateLimiter","maxConcurrent","interval","queue","running","execute","waitForSlot","processQueue","shift","singleton","factory","instance","safeJsonParse","json","fallback","parse","getEnv","defaultValue","process","env","undefined","Error","isBrowser","isProduction","NODE_ENV","isDevelopment","isTest"],"mappings":"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","file":"index.mjs","sourcesContent":["/**\n * Shared Utility Functions\n * Common utilities used across the application\n */\n\n// ==================== Date Utilities ====================\nexport const dateUtils = {\n  /**\n   * Format date to readable string\n   */\n  formatDate(date: Date | string, format: 'short' | 'long' | 'iso' = 'short'): string {\n    const d = new Date(date);\n\n    if (isNaN(d.getTime())) {\n      return 'Invalid Date';\n    }\n\n    switch (format) {\n      case 'long':\n        return d.toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit',\n        });\n      case 'iso':\n        return d.toISOString();\n      case 'short':\n      default:\n        return d.toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'short',\n          day: 'numeric',\n        });\n    }\n  },\n\n  /**\n   * Get relative time string (e.g., \"2 hours ago\")\n   */\n  getRelativeTime(date: Date | string): string {\n    const d = new Date(date);\n    const now = new Date();\n    const diff = now.getTime() - d.getTime();\n\n    const seconds = Math.floor(diff / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n    const months = Math.floor(days / 30);\n    const years = Math.floor(days / 365);\n\n    if (years > 0) return `${years} year${years > 1 ? 's' : ''} ago`;\n    if (months > 0) return `${months} month${months > 1 ? 's' : ''} ago`;\n    if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;\n    if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n    if (minutes > 0) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n    return 'Just now';\n  },\n\n  /**\n   * Check if date is today\n   */\n  isToday(date: Date | string): boolean {\n    const d = new Date(date);\n    const today = new Date();\n    return d.toDateString() === today.toDateString();\n  },\n\n  /**\n   * Add days to date\n   */\n  addDays(date: Date | string, days: number): Date {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  },\n\n  /**\n   * Get date range\n   */\n  getDateRange(start: Date | string, end: Date | string): Date[] {\n    const dates: Date[] = [];\n    const current = new Date(start);\n    const endDate = new Date(end);\n\n    while (current <= endDate) {\n      dates.push(new Date(current));\n      current.setDate(current.getDate() + 1);\n    }\n\n    return dates;\n  },\n};\n\n// ==================== String Utilities ====================\nexport const stringUtils = {\n  /**\n   * Truncate string with ellipsis\n   */\n  truncate(str: string, maxLength: number, suffix = '...'): string {\n    if (str.length <= maxLength) return str;\n    return str.substring(0, maxLength - suffix.length) + suffix;\n  },\n\n  /**\n   * Convert to slug\n   */\n  slugify(str: string): string {\n    return str\n      .toLowerCase()\n      .trim()\n      .replace(/[^\\w\\s-]/g, '')\n      .replace(/[\\s_-]+/g, '-')\n      .replace(/^-+|-+$/g, '');\n  },\n\n  /**\n   * Capitalize first letter\n   */\n  capitalize(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  },\n\n  /**\n   * Convert camelCase to Title Case\n   */\n  camelToTitle(str: string): string {\n    return str\n      .replace(/([A-Z])/g, ' $1')\n      .replace(/^./, s => s.toUpperCase())\n      .trim();\n  },\n\n  /**\n   * Convert snake_case to camelCase\n   */\n  snakeToCamel(str: string): string {\n    return str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n  },\n\n  /**\n   * Convert camelCase to snake_case\n   */\n  camelToSnake(str: string): string {\n    return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n  },\n\n  /**\n   * Generate random string\n   */\n  generateId(length = 8): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  },\n};\n\n// ==================== Number Utilities ====================\nexport const numberUtils = {\n  /**\n   * Format number with commas\n   */\n  formatNumber(num: number): string {\n    return num.toLocaleString('en-US');\n  },\n\n  /**\n   * Format as currency\n   */\n  formatCurrency(amount: number, currency = 'USD'): string {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency,\n    }).format(amount);\n  },\n\n  /**\n   * Format as percentage\n   */\n  formatPercent(value: number, decimals = 2): string {\n    return `${(value * 100).toFixed(decimals)}%`;\n  },\n\n  /**\n   * Format bytes to human readable\n   */\n  formatBytes(bytes: number, decimals = 2): string {\n    if (bytes === 0) return '0 Bytes';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n  },\n\n  /**\n   * Clamp number between min and max\n   */\n  clamp(num: number, min: number, max: number): number {\n    return Math.min(Math.max(num, min), max);\n  },\n\n  /**\n   * Round to decimal places\n   */\n  round(num: number, decimals = 2): number {\n    const factor = Math.pow(10, decimals);\n    return Math.round(num * factor) / factor;\n  },\n};\n\n// ==================== Array Utilities ====================\nexport const arrayUtils = {\n  /**\n   * Chunk array into smaller arrays\n   */\n  chunk<T>(array: T[], size: number): T[][] {\n    const chunks: T[][] = [];\n    for (let i = 0; i < array.length; i += size) {\n      chunks.push(array.slice(i, i + size));\n    }\n    return chunks;\n  },\n\n  /**\n   * Remove duplicates from array\n   */\n  unique<T>(array: T[]): T[] {\n    return [...new Set(array)];\n  },\n\n  /**\n   * Group array by key\n   */\n  groupBy<T>(array: T[], key: keyof T): Record<string, T[]> {\n    return array.reduce(\n      (groups, item) => {\n        const group = String(item[key]);\n        groups[group] = groups[group] || [];\n        groups[group].push(item);\n        return groups;\n      },\n      {} as Record<string, T[]>\n    );\n  },\n\n  /**\n   * Sort array by key\n   */\n  sortBy<T>(array: T[], key: keyof T, order: 'asc' | 'desc' = 'asc'): T[] {\n    return [...array].sort((a, b) => {\n      const aVal = a[key];\n      const bVal = b[key];\n\n      if (aVal < bVal) return order === 'asc' ? -1 : 1;\n      if (aVal > bVal) return order === 'asc' ? 1 : -1;\n      return 0;\n    });\n  },\n\n  /**\n   * Shuffle array\n   */\n  shuffle<T>(array: T[]): T[] {\n    const shuffled = [...array];\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n    return shuffled;\n  },\n\n  /**\n   * Get random item from array\n   */\n  random<T>(array: T[]): T | undefined {\n    return array[Math.floor(Math.random() * array.length)];\n  },\n};\n\n// ==================== Object Utilities ====================\nexport const objectUtils = {\n  /**\n   * Deep clone object\n   */\n  deepClone<T>(obj: T): T {\n    if (obj === null || typeof obj !== 'object') return obj;\n    if (obj instanceof Date) return new Date(obj.getTime()) as any;\n    if (obj instanceof Array) return obj.map(item => deepClone(item)) as any;\n\n    const cloned = {} as T;\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        cloned[key] = deepClone(obj[key]);\n      }\n    }\n    return cloned;\n  },\n\n  /**\n   * Deep merge objects\n   */\n  deepMerge<T extends Record<string, any>>(...objects: Partial<T>[]): T {\n    const result = {} as T;\n\n    for (const obj of objects) {\n      for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          const val = obj[key];\n          if (val !== null && typeof val === 'object' && !Array.isArray(val)) {\n            result[key] = deepMerge(result[key] || {}, val);\n          } else {\n            result[key] = val as any;\n          }\n        }\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Pick properties from object\n   */\n  pick<T, K extends keyof T>(obj: T, keys: K[]): Pick<T, K> {\n    const picked = {} as Pick<T, K>;\n    for (const key of keys) {\n      if (key in obj) {\n        picked[key] = obj[key];\n      }\n    }\n    return picked;\n  },\n\n  /**\n   * Omit properties from object\n   */\n  omit<T, K extends keyof T>(obj: T, keys: K[]): Omit<T, K> {\n    const result = { ...obj };\n    for (const key of keys) {\n      delete result[key];\n    }\n    return result;\n  },\n\n  /**\n   * Check if object is empty\n   */\n  isEmpty(obj: Record<string, any>): boolean {\n    return Object.keys(obj).length === 0;\n  },\n};\n\n// ==================== Validation Utilities ====================\nexport const validationUtils = {\n  /**\n   * Validate email\n   */\n  isEmail(email: string): boolean {\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return re.test(email);\n  },\n\n  /**\n   * Validate URL\n   */\n  isURL(url: string): boolean {\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  },\n\n  /**\n   * Validate phone number\n   */\n  isPhone(phone: string): boolean {\n    const re = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/;\n    return re.test(phone);\n  },\n\n  /**\n   * Validate strong password\n   */\n  isStrongPassword(password: string): {\n    valid: boolean;\n    errors: string[];\n  } {\n    const errors: string[] = [];\n\n    if (password.length < 8) {\n      errors.push('Password must be at least 8 characters');\n    }\n    if (!/[A-Z]/.test(password)) {\n      errors.push('Password must contain uppercase letter');\n    }\n    if (!/[a-z]/.test(password)) {\n      errors.push('Password must contain lowercase letter');\n    }\n    if (!/\\d/.test(password)) {\n      errors.push('Password must contain number');\n    }\n    if (!/[!@#$%^&*]/.test(password)) {\n      errors.push('Password must contain special character');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    };\n  },\n};\n\n// ==================== Browser Utilities ====================\nexport const browserUtils = {\n  /**\n   * Copy to clipboard\n   */\n  async copyToClipboard(text: string): Promise<boolean> {\n    try {\n      await navigator.clipboard.writeText(text);\n      return true;\n    } catch {\n      // Fallback for older browsers\n      const textarea = document.createElement('textarea');\n      textarea.value = text;\n      textarea.style.position = 'fixed';\n      textarea.style.opacity = '0';\n      document.body.appendChild(textarea);\n      textarea.select();\n      const success = document.execCommand('copy');\n      document.body.removeChild(textarea);\n      return success;\n    }\n  },\n\n  /**\n   * Download file\n   */\n  downloadFile(data: Blob | string, filename: string, type?: string): void {\n    const blob = typeof data === 'string' ? new Blob([data], { type: type || 'text/plain' }) : data;\n\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  },\n\n  /**\n   * Get query params\n   */\n  getQueryParams(): Record<string, string> {\n    const params: Record<string, string> = {};\n    const searchParams = new URLSearchParams(window.location.search);\n    searchParams.forEach((value, key) => {\n      params[key] = value;\n    });\n    return params;\n  },\n\n  /**\n   * Set query params\n   */\n  setQueryParams(params: Record<string, string>): void {\n    const searchParams = new URLSearchParams(params);\n    const newUrl = `${window.location.pathname}?${searchParams.toString()}`;\n    window.history.pushState({}, '', newUrl);\n  },\n\n  /**\n   * Debounce function\n   */\n  debounce<T extends (...args: any[]) => any>(\n    func: T,\n    wait: number\n  ): (...args: Parameters<T>) => void {\n    let timeout: NodeJS.Timeout;\n    return (...args: Parameters<T>) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func(...args), wait);\n    };\n  },\n\n  /**\n   * Throttle function\n   */\n  throttle<T extends (...args: any[]) => any>(\n    func: T,\n    wait: number\n  ): (...args: Parameters<T>) => void {\n    let lastCall = 0;\n    return (...args: Parameters<T>) => {\n      const now = Date.now();\n      if (now - lastCall >= wait) {\n        lastCall = now;\n        func(...args);\n      }\n    };\n  },\n};\n\n// Export all utilities\nexport default {\n  date: dateUtils,\n  string: stringUtils,\n  number: numberUtils,\n  array: arrayUtils,\n  object: objectUtils,\n  validation: validationUtils,\n  browser: browserUtils,\n};\n","/**\n * @upcoach/utils\n * Shared utility functions\n */\n\n// Re-export all utilities from shared folder\nexport * from '../../../shared/utils';\n\n// Additional utility functions\n\n/**\n * Sleep/delay function\n */\nexport const sleep = (ms: number): Promise<void> => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Retry function with exponential backoff\n */\nexport async function retry<T>(\n  fn: () => Promise<T>,\n  options: {\n    retries?: number;\n    delay?: number;\n    maxDelay?: number;\n    factor?: number;\n    onRetry?: (error: Error, attempt: number) => void;\n  } = {}\n): Promise<T> {\n  const { retries = 3, delay = 1000, maxDelay = 10000, factor = 2, onRetry } = options;\n\n  let lastError: Error;\n  let currentDelay = delay;\n\n  for (let i = 0; i <= retries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n\n      if (i < retries) {\n        if (onRetry) {\n          onRetry(lastError, i + 1);\n        }\n\n        await sleep(currentDelay);\n        currentDelay = Math.min(currentDelay * factor, maxDelay);\n      }\n    }\n  }\n\n  throw lastError!;\n}\n\n/**\n * Memoize function\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  getKey?: (...args: Parameters<T>) => string\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>) => {\n    const key = getKey ? getKey(...args) : JSON.stringify(args);\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n\n    const result = fn(...args);\n    cache.set(key, result);\n    return result;\n  }) as T;\n}\n\n/**\n * Rate limiter\n */\nexport class RateLimiter {\n  private queue: Array<() => void> = [];\n  private running = 0;\n\n  constructor(\n    private maxConcurrent: number,\n    private interval: number\n  ) {}\n\n  async execute<T>(fn: () => Promise<T>): Promise<T> {\n    await this.waitForSlot();\n\n    try {\n      this.running++;\n      return await fn();\n    } finally {\n      this.running--;\n      this.processQueue();\n    }\n  }\n\n  private waitForSlot(): Promise<void> {\n    return new Promise(resolve => {\n      if (this.running < this.maxConcurrent) {\n        resolve();\n      } else {\n        this.queue.push(resolve);\n      }\n    });\n  }\n\n  private processQueue() {\n    if (this.queue.length > 0 && this.running < this.maxConcurrent) {\n      const resolve = this.queue.shift();\n      if (resolve) {\n        setTimeout(resolve, this.interval);\n      }\n    }\n  }\n}\n\n/**\n * Create a singleton instance\n */\nexport function singleton<T>(factory: () => T): () => T {\n  let instance: T | undefined;\n\n  return () => {\n    if (!instance) {\n      instance = factory();\n    }\n    return instance;\n  };\n}\n\n/**\n * Parse JSON safely\n */\nexport function safeJsonParse<T = any>(json: string, fallback?: T): T | undefined {\n  try {\n    return JSON.parse(json);\n  } catch {\n    return fallback;\n  }\n}\n\n/**\n * Environment variable getter with type safety\n */\nexport function getEnv(key: string, defaultValue?: string): string {\n  const value = process.env[key];\n\n  if (value === undefined && defaultValue === undefined) {\n    throw new Error(`Environment variable ${key} is not defined`);\n  }\n\n  return value ?? defaultValue!;\n}\n\n/**\n * Check if running in browser\n */\nexport const isBrowser = typeof window !== 'undefined';\n\n/**\n * Check if running in production\n */\nexport const isProduction = process.env.NODE_ENV === 'production';\n\n/**\n * Check if running in development\n */\nexport const isDevelopment = process.env.NODE_ENV === 'development';\n\n/**\n * Check if running in test\n */\nexport const isTest = process.env.NODE_ENV === 'test';\n"]}