{"version":3,"sources":["../../src/components/SessionWarningModal.tsx","../../src/components/LoadingSpinner.tsx"],"names":["useState","useRef","useEffect","jsxs","Fragment","jsx"],"mappings":"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","file":"index.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\ninterface SessionWarningModalProps {\n  onExtend?: () => void;\n  onExpire?: () => void;\n  className?: string;\n}\n\n/**\n * Accessible session timeout warning modal\n * Provides a 2-minute warning before session expires\n */\nexport const SessionWarningModal: React.FC<SessionWarningModalProps> = ({\n  onExtend,\n  onExpire,\n  className = '',\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [timeRemaining, setTimeRemaining] = useState<string>('2:00');\n  const modalRef = useRef<HTMLDivElement>(null);\n  const extendButtonRef = useRef<HTMLButtonElement>(null);\n  const previousFocusRef = useRef<HTMLElement | null>(null);\n  const countdownIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    const handleWarningShown = (remainingTime: string = '2:00') => {\n      // Store current focus\n      previousFocusRef.current = document.activeElement as HTMLElement;\n\n      setIsVisible(true);\n      setTimeRemaining(remainingTime);\n\n      // Focus the extend button when modal opens\n      setTimeout(() => {\n        extendButtonRef.current?.focus();\n      }, 100);\n\n      // Start countdown update\n      if (countdownIntervalRef.current) {\n        clearInterval(countdownIntervalRef.current);\n      }\n\n      countdownIntervalRef.current = setInterval(() => {\n        const [minutes, seconds] = remainingTime.split(':').map(Number);\n        const totalSeconds = minutes * 60 + seconds - 1;\n        \n        if (totalSeconds <= 0) {\n          if (onExpire) onExpire();\n          return;\n        }\n\n        const newMinutes = Math.floor(totalSeconds / 60);\n        const newSeconds = totalSeconds % 60;\n        const newTimeString = `${newMinutes}:${newSeconds.toString().padStart(2, '0')}`;\n        setTimeRemaining(newTimeString);\n\n        // Update ARIA live region\n        const liveRegion = document.getElementById('session-countdown');\n        if (liveRegion) {\n          liveRegion.textContent = `Time remaining: ${newTimeString}`;\n        }\n      }, 1000);\n    };\n\n    const handleWarningHidden = () => {\n      setIsVisible(false);\n\n      // Clear countdown\n      if (countdownIntervalRef.current) {\n        clearInterval(countdownIntervalRef.current);\n        countdownIntervalRef.current = null;\n      }\n\n      // Restore previous focus\n      if (previousFocusRef.current) {\n        previousFocusRef.current.focus();\n        previousFocusRef.current = null;\n      }\n    };\n\n    const handleSessionExpired = () => {\n      setIsVisible(false);\n\n      // Clear countdown\n      if (countdownIntervalRef.current) {\n        clearInterval(countdownIntervalRef.current);\n        countdownIntervalRef.current = null;\n      }\n\n      if (onExpire) {\n        onExpire();\n      }\n    };\n\n    const handleSessionExtended = () => {\n      handleWarningHidden();\n\n      if (onExtend) {\n        onExtend();\n      }\n    };\n\n    return () => {\n      if (countdownIntervalRef.current) {\n        clearInterval(countdownIntervalRef.current);\n      }\n    };\n  }, [onExtend, onExpire]);\n\n  // Handle keyboard navigation\n  useEffect(() => {\n    if (!isVisible) return;\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        // Don't allow closing with Escape - user must make a choice\n        e.preventDefault();\n      } else if (e.key === 'Enter' || e.key === ' ') {\n        // Extend session on Enter or Space\n        if (document.activeElement === extendButtonRef.current) {\n          e.preventDefault();\n          handleExtendSession();\n        }\n      }\n    };\n\n    const handleFocusTrap = (e: FocusEvent) => {\n      if (!modalRef.current || !isVisible) return;\n\n      // Keep focus within modal\n      if (!modalRef.current.contains(e.target as Node)) {\n        e.preventDefault();\n        extendButtonRef.current?.focus();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('focusin', handleFocusTrap);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('focusin', handleFocusTrap);\n    };\n  }, [isVisible]);\n\n  const handleExtendSession = () => {\n    if (onExtend) {\n      onExtend();\n    }\n    setIsVisible(false);\n  };\n\n  const handleLogout = () => {\n    setIsVisible(false);\n\n    if (onExpire) {\n      onExpire();\n    }\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div className=\"fixed inset-0 z-40 bg-black bg-opacity-50\" aria-hidden=\"true\" />\n\n      {/* Modal */}\n      <div\n        ref={modalRef}\n        role=\"alertdialog\"\n        aria-modal=\"true\"\n        aria-labelledby=\"session-warning-title\"\n        aria-describedby=\"session-warning-description\"\n        className={`fixed inset-0 z-50 flex items-center justify-center p-4 ${className}`}\n      >\n        <div className=\"max-w-md w-full bg-white rounded-lg shadow-xl p-6\">\n          {/* Icon */}\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center\">\n              <svg\n                className=\"w-8 h-8 text-yellow-600\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                aria-hidden=\"true\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"\n                />\n              </svg>\n            </div>\n          </div>\n\n          {/* Title */}\n          <h2\n            id=\"session-warning-title\"\n            className=\"text-xl font-bold text-center text-gray-900 mb-2\"\n          >\n            Session Expiring Soon\n          </h2>\n\n          {/* Description */}\n          <div id=\"session-warning-description\" className=\"text-center mb-6\">\n            <p className=\"text-gray-600 mb-2\">Your session will expire due to inactivity.</p>\n            <p className=\"text-lg font-semibold text-gray-900\">Time remaining: {timeRemaining}</p>\n          </div>\n\n          {/* Live region for countdown updates */}\n          <div\n            id=\"session-countdown\"\n            role=\"timer\"\n            aria-live=\"polite\"\n            aria-atomic=\"true\"\n            className=\"sr-only\"\n          >\n            Time remaining: {timeRemaining}\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex gap-3\">\n            <button\n              ref={extendButtonRef}\n              onClick={handleExtendSession}\n              className=\"flex-1 px-4 py-2 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n              aria-label=\"Extend session and continue working\"\n            >\n              Continue Working\n            </button>\n            <button\n              onClick={handleLogout}\n              className=\"flex-1 px-4 py-2 bg-gray-200 text-gray-700 font-medium rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2\"\n              aria-label=\"Log out now\"\n            >\n              Log Out\n            </button>\n          </div>\n\n          {/* Help text */}\n          <p className=\"mt-4 text-xs text-center text-gray-500\">\n            For your security, sessions expire after 30 minutes of inactivity.\n          </p>\n        </div>\n      </div>\n\n      {/* Screen reader announcement for critical moments */}\n      <div role=\"status\" aria-live=\"assertive\" aria-atomic=\"true\" className=\"sr-only\">\n        {parseInt(timeRemaining) <= 30 &&\n          `Warning: Only ${timeRemaining} remaining. Please choose to continue working or log out.`}\n      </div>\n    </>\n  );\n};\n\n/**\n * Hook for integrating session warning modal\n */\nexport function useSessionWarning() {\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {\n    // Mock session manager for now\n    const handleWarning = () => setShowModal(true);\n    const handleHidden = () => setShowModal(false);\n    const handleExpired = () => setShowModal(false);\n\n    // Add cleanup if needed\n    return () => {\n      // Cleanup logic here\n    };\n  }, []);\n\n  return showModal;\n}\n\nexport default SessionWarningModal;","import React from 'react';\n\nexport interface LoadingSpinnerProps {\n  size?: 'sm' | 'md' | 'lg';\n  color?: string;\n  className?: string;\n}\n\nexport const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({\n  size = 'md',\n  color = '#3b82f6',\n  className = '',\n}) => {\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-8 h-8',\n    lg: 'w-12 h-12',\n  };\n\n  return (\n    <div\n      className={`inline-block animate-spin rounded-full border-2 border-solid border-current border-r-transparent align-[-0.125em] ${sizeClasses[size]} ${className}`}\n      style={{ borderTopColor: color, borderLeftColor: color, borderBottomColor: color }}\n      role=\"status\"\n      aria-label=\"Loading\"\n    >\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;"]}