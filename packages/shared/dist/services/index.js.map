{"version":3,"sources":["../../src/services/apiClient.ts"],"names":["axios"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Unified API Client Factory\n * Creates configured axios instances for admin and CMS panels\n */\n\nimport axios, { AxiosInstance, AxiosError } from 'axios';\n\nexport interface ApiClientConfig {\n  baseURL: string;\n  timeout?: number;\n  withCredentials?: boolean;\n  getAuthToken?: () => string | null;\n  getCSRFToken?: () => Promise<string | null>;\n  skipCSRF?: boolean;\n  onUnauthorized?: () => void;\n  onError?: (error: AxiosError) => void;\n}\n\nexport interface ApiClient extends AxiosInstance {\n  setAuthToken: (token: string | null) => void;\n}\n\n/**\n * Create a configured API client instance\n */\nexport function createApiClient(config: ApiClientConfig): ApiClient {\n  const client = axios.create({\n    baseURL: config.baseURL,\n    timeout: config.timeout || 30000,\n    withCredentials: config.withCredentials || false,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  }) as ApiClient;\n\n  // Auth token management\n  let authToken: string | null = null;\n\n  client.setAuthToken = (token: string | null) => {\n    authToken = token;\n  };\n\n  // Request interceptor for auth and CSRF tokens\n  client.interceptors.request.use(\n    async requestConfig => {\n      // Add auth token\n      const token = authToken || (config.getAuthToken ? config.getAuthToken() : null);\n      if (token) {\n        requestConfig.headers.Authorization = `Bearer ${token}`;\n      }\n\n      // Add CSRF token for state-changing requests\n      const method = requestConfig.method?.toUpperCase();\n      if (\n        !config.skipCSRF &&\n        method &&\n        ['POST', 'PUT', 'DELETE', 'PATCH'].includes(method) &&\n        !requestConfig.headers['X-Skip-CSRF']\n      ) {\n        try {\n          const csrfToken = config.getCSRFToken ? await config.getCSRFToken() : null;\n          if (csrfToken) {\n            requestConfig.headers['X-CSRF-Token'] = csrfToken;\n          }\n        } catch (error) {\n          console.warn('Failed to get CSRF token:', error);\n          // Continue without CSRF token - let server handle it\n        }\n      }\n\n      return requestConfig;\n    },\n    error => {\n      return Promise.reject(error);\n    }\n  );\n\n  // Response interceptor for error handling\n  client.interceptors.response.use(\n    response => response,\n    async (error: AxiosError) => {\n      // Handle 401 Unauthorized\n      if (error.response?.status === 401 && config.onUnauthorized) {\n        config.onUnauthorized();\n      }\n\n      // Handle CSRF token expiry (403 with specific error)\n      if (\n        error.response?.status === 403 &&\n        (error.response.data as any)?.code === 'CSRF_TOKEN_INVALID'\n      ) {\n        // Retry once with new CSRF token\n        if (!(error.config as any)?._retried && config.getCSRFToken) {\n          (error.config as any)._retried = true;\n\n          try {\n            // Force refresh CSRF token\n            const newToken = await config.getCSRFToken();\n            if (newToken && error.config) {\n              error.config.headers['X-CSRF-Token'] = newToken;\n              return client(error.config);\n            }\n          } catch (csrfError) {\n            console.error('Failed to refresh CSRF token:', csrfError);\n          }\n        }\n      }\n\n      // Call custom error handler\n      if (config.onError) {\n        config.onError(error);\n      }\n\n      return Promise.reject(error);\n    }\n  );\n\n  return client;\n}\n\n/**\n * Helper function to handle API errors consistently\n */\nexport function handleApiError(error: any): {\n  message: string;\n  code?: string;\n  details?: any;\n} {\n  if (axios.isAxiosError(error)) {\n    const response = error.response;\n\n    if (response) {\n      // Server responded with error\n      return {\n        message: response.data?.message || response.data?.error || `Error: ${response.status}`,\n        code: response.data?.code || String(response.status),\n        details: response.data,\n      };\n    } else if (error.request) {\n      // Request made but no response\n      return {\n        message: 'No response from server. Please check your connection.',\n        code: 'NETWORK_ERROR',\n      };\n    }\n  }\n\n  // Something else happened\n  return {\n    message: error.message || 'An unexpected error occurred',\n    code: 'UNKNOWN_ERROR',\n  };\n}\n\n/**\n * Create a retry wrapper for API calls\n */\nexport function withRetry<T>(\n  apiCall: () => Promise<T>,\n  options: {\n    maxRetries?: number;\n    delay?: number;\n    shouldRetry?: (error: any) => boolean;\n  } = {}\n): Promise<T> {\n  const {\n    maxRetries = 3,\n    delay = 1000,\n    shouldRetry = error => {\n      // Retry on network errors and 5xx server errors\n      if (axios.isAxiosError(error)) {\n        return !error.response || error.response.status >= 500;\n      }\n      return false;\n    },\n  } = options;\n\n  return new Promise(async (resolve, reject) => {\n    let lastError: any;\n\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        const result = await apiCall();\n        return resolve(result);\n      } catch (error) {\n        lastError = error;\n\n        if (!shouldRetry(error) || i === maxRetries - 1) {\n          return reject(error);\n        }\n\n        // Exponential backoff\n        await new Promise(r => setTimeout(r, delay * Math.pow(2, i)));\n      }\n    }\n\n    reject(lastError);\n  });\n}\n\n/**\n * Create request/response transformers\n */\nexport const transformers = {\n  // Convert snake_case to camelCase\n  snakeToCamel: (data: any): any => {\n    if (Array.isArray(data)) {\n      return data.map(transformers.snakeToCamel);\n    }\n\n    if (data !== null && typeof data === 'object') {\n      return Object.keys(data).reduce((acc, key) => {\n        const camelKey = key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n        acc[camelKey] = transformers.snakeToCamel(data[key]);\n        return acc;\n      }, {} as any);\n    }\n\n    return data;\n  },\n\n  // Convert camelCase to snake_case\n  camelToSnake: (data: any): any => {\n    if (Array.isArray(data)) {\n      return data.map(transformers.camelToSnake);\n    }\n\n    if (data !== null && typeof data === 'object') {\n      return Object.keys(data).reduce((acc, key) => {\n        const snakeKey = key.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n        acc[snakeKey] = transformers.camelToSnake(data[key]);\n        return acc;\n      }, {} as any);\n    }\n\n    return data;\n  },\n};\n\nexport default createApiClient;"]}