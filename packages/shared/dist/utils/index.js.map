{"version":3,"sources":["../../src/utils/performance.ts","../../src/utils/index.ts"],"names":[],"mappings":";;;AAiCA,IAAM,UAAA,GAAa;AAAA,EACjB,GAAA,EAAK,EAAE,IAAA,EAAM,IAAA,EAAM,MAAM,GAAA,EAAK;AAAA;AAAA,EAC9B,GAAA,EAAK,EAAE,IAAA,EAAM,IAAA,EAAM,MAAM,GAAA,EAAK;AAAA;AAAA,EAC9B,GAAA,EAAK,EAAE,IAAA,EAAM,GAAA,EAAK,MAAM,IAAA,EAAK;AAAA;AAAA,EAC7B,GAAA,EAAK,EAAE,IAAA,EAAM,GAAA,EAAK,MAAM,GAAA,EAAI;AAAA;AAAA,EAC5B,IAAA,EAAM,EAAE,IAAA,EAAM,GAAA,EAAK,MAAM,IAAA;AAAK;AAChC,CAAA;AAKA,SAAS,oBAAA,CAAqB,YAAoB,KAAA,EAAsD;AACtG,EAAA,MAAM,SAAA,GAAY,WAAW,UAAqC,CAAA;AAClE,EAAA,IAAI,CAAC,WAAW,OAAO,MAAA;AAEvB,EAAA,IAAI,KAAA,IAAS,SAAA,CAAU,IAAA,EAAM,OAAO,MAAA;AACpC,EAAA,IAAI,KAAA,IAAS,SAAA,CAAU,IAAA,EAAM,OAAO,mBAAA;AACpC,EAAA,OAAO,MAAA;AACT;AAKO,SAAS,iBAAiB,QAAA,EAA0C;AAEzE,EAAA,IAAI,OAAO,WAAW,WAAA,EAAa;AAEnC,EAAA,IAAI;AAEF,IAAA,OAAO,YAAY,CAAA,CAAE,IAAA,CAAK,CAAC,EAAE,OAAO,KAAA,EAAO,KAAA,EAAO,KAAA,EAAO,MAAA,EAAO,KAAM;AACpE,MAAA,KAAA,CAAM,CAAC,MAAA,KAAW;AAChB,QAAA,QAAA,CAAS;AAAA,UACP,IAAI,MAAA,CAAO,EAAA;AAAA,UACX,IAAA,EAAM,KAAA;AAAA,UACN,OAAO,MAAA,CAAO,KAAA;AAAA,UACd,OAAO,MAAA,CAAO,KAAA;AAAA,UACd,MAAA,EAAQ,oBAAA,CAAqB,KAAA,EAAO,MAAA,CAAO,KAAK,CAAA;AAAA,UAChD,SAAS,MAAA,CAAO,OAAA;AAAA,UAChB,gBAAgB,MAAA,CAAO;AAAA,SACxB,CAAA;AAAA,MACH,CAAC,CAAA;AAED,MAAA,KAAA,CAAM,CAAC,MAAA,KAAW;AAChB,QAAA,QAAA,CAAS;AAAA,UACP,IAAI,MAAA,CAAO,EAAA;AAAA,UACX,IAAA,EAAM,KAAA;AAAA,UACN,OAAO,MAAA,CAAO,KAAA;AAAA,UACd,OAAO,MAAA,CAAO,KAAA;AAAA,UACd,MAAA,EAAQ,oBAAA,CAAqB,KAAA,EAAO,MAAA,CAAO,KAAK,CAAA;AAAA,UAChD,SAAS,MAAA,CAAO,OAAA;AAAA,UAChB,gBAAgB,MAAA,CAAO;AAAA,SACxB,CAAA;AAAA,MACH,CAAC,CAAA;AAED,MAAA,KAAA,CAAM,CAAC,MAAA,KAAW;AAChB,QAAA,QAAA,CAAS;AAAA,UACP,IAAI,MAAA,CAAO,EAAA;AAAA,UACX,IAAA,EAAM,KAAA;AAAA,UACN,OAAO,MAAA,CAAO,KAAA;AAAA,UACd,OAAO,MAAA,CAAO,KAAA;AAAA,UACd,MAAA,EAAQ,oBAAA,CAAqB,KAAA,EAAO,MAAA,CAAO,KAAK,CAAA;AAAA,UAChD,SAAS,MAAA,CAAO,OAAA;AAAA,UAChB,gBAAgB,MAAA,CAAO;AAAA,SACxB,CAAA;AAAA,MACH,CAAC,CAAA;AAED,MAAA,KAAA,CAAM,CAAC,MAAA,KAAW;AAChB,QAAA,QAAA,CAAS;AAAA,UACP,IAAI,MAAA,CAAO,EAAA;AAAA,UACX,IAAA,EAAM,KAAA;AAAA,UACN,OAAO,MAAA,CAAO,KAAA;AAAA,UACd,OAAO,MAAA,CAAO,KAAA;AAAA,UACd,MAAA,EAAQ,oBAAA,CAAqB,KAAA,EAAO,MAAA,CAAO,KAAK,CAAA;AAAA,UAChD,SAAS,MAAA,CAAO,OAAA;AAAA,UAChB,gBAAgB,MAAA,CAAO;AAAA,SACxB,CAAA;AAAA,MACH,CAAC,CAAA;AAED,MAAA,MAAA,CAAO,CAAC,MAAA,KAAW;AACjB,QAAA,QAAA,CAAS;AAAA,UACP,IAAI,MAAA,CAAO,EAAA;AAAA,UACX,IAAA,EAAM,MAAA;AAAA,UACN,OAAO,MAAA,CAAO,KAAA;AAAA,UACd,OAAO,MAAA,CAAO,KAAA;AAAA,UACd,MAAA,EAAQ,oBAAA,CAAqB,MAAA,EAAQ,MAAA,CAAO,KAAK,CAAA;AAAA,UACjD,SAAS,MAAA,CAAO,OAAA;AAAA,UAChB,gBAAgB,MAAA,CAAO;AAAA,SACxB,CAAA;AAAA,MACH,CAAC,CAAA;AAAA,IACH,CAAC,CAAA,CAAE,KAAA,CAAM,CAAC,KAAA,KAAU;AAClB,MAAA,OAAA,CAAQ,IAAA,CAAK,sCAAsC,KAAK,CAAA;AAAA,IAC1D,CAAC,CAAA;AAAA,EACH,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,IAAA,CAAK,+BAA+B,KAAK,CAAA;AAAA,EACnD;AACF;AAKO,SAAS,0BAA0B,OAAA,EAAsC;AAC9E,EAAA,MAAM,UAAA,GAAa,WAAA,CAAY,gBAAA,CAAiB,YAAY,EAAE,CAAC,CAAA;AAC/D,EAAA,MAAM,SAAA,GAAY,WAAA,CAAY,gBAAA,CAAiB,UAAU,CAAA;AAEzD,EAAA,OAAO;AAAA,IACL,SAAA,EAAW,KAAK,GAAA,EAAI;AAAA,IACpB,GAAA,EAAK,OAAO,QAAA,CAAS,IAAA;AAAA,IACrB,WAAW,SAAA,CAAU,SAAA;AAAA,IACrB,cAAA,EAAiB,SAAA,CAAkB,UAAA,EAAY,aAAA,IAAiB,SAAA;AAAA,IAChE,OAAA;AAAA,IACA,YAAA,EAAc,UAAA,GAAa,UAAA,CAAW,YAAA,GAAe,WAAW,UAAA,GAAa,CAAA;AAAA,IAC7E,iBAAiB,SAAA,CAAU,KAAA,CAAM,GAAG,EAAE,CAAA,CAAE,IAAI,CAAA,QAAA,MAAa;AAAA,MACvD,MAAM,QAAA,CAAS,IAAA;AAAA,MACf,UAAU,QAAA,CAAS,QAAA;AAAA,MACnB,IAAA,EAAM,SAAS,YAAA,IAAgB,CAAA;AAAA,MAC/B,IAAA,EAAM,eAAA,CAAgB,QAAA,CAAS,IAAI;AAAA,KACrC,CAAE;AAAA,GACJ;AACF;AAKA,SAAS,gBAAgB,GAAA,EAAqB;AAC5C,EAAA,IAAI,GAAA,CAAI,QAAA,CAAS,MAAM,CAAA,EAAG,OAAO,YAAA;AACjC,EAAA,IAAI,GAAA,CAAI,QAAA,CAAS,KAAK,CAAA,EAAG,OAAO,QAAA;AAChC,EAAA,IAAI,GAAA,CAAI,KAAA,CAAM,gCAAgC,CAAA,EAAG,OAAO,OAAA;AACxD,EAAA,IAAI,GAAA,CAAI,SAAS,OAAO,CAAA,IAAK,IAAI,QAAA,CAAS,QAAQ,GAAG,OAAO,MAAA;AAC5D,EAAA,OAAO,OAAA;AACT;AAKA,eAAsB,sBAAsB,MAAA,EAA0C;AACpF,EAAA,IAAI;AAEF,IAAA,IAAI,gBAAgB,SAAA,EAAW;AAC7B,MAAA,SAAA,CAAU,UAAA,CAAW,4BAAA,EAA8B,IAAA,CAAK,SAAA,CAAU,MAAM,CAAC,CAAA;AAAA,IAC3E,CAAA,MAAO;AAEL,MAAA,MAAM,MAAM,4BAAA,EAA8B;AAAA,QACxC,MAAA,EAAQ,MAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAA,EAAmB;AAAA,QAC9C,IAAA,EAAM,IAAA,CAAK,SAAA,CAAU,MAAM,CAAA;AAAA,QAC3B,SAAA,EAAW;AAAA,OACZ,CAAA;AAAA,IACH;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,IAAA,CAAK,sCAAsC,KAAK,CAAA;AAAA,EAC1D;AACF;AAaA,IAAM,cAAA,GAAoC;AAAA,EACxC,GAAA,EAAK,IAAA;AAAA,EACL,GAAA,EAAK,IAAA;AAAA,EACL,GAAA,EAAK,GAAA;AAAA,EACL,GAAA,EAAK,GAAA;AAAA,EACL,IAAA,EAAM;AACR,CAAA;AAEO,SAAS,sBAAA,CACd,OAAA,EACA,MAAA,GAA4B,cAAA,EACe;AAC3C,EAAA,MAAM,aAAuB,EAAC;AAE9B,EAAA,OAAA,CAAQ,QAAQ,CAAA,MAAA,KAAU;AACxB,IAAA,MAAM,WAAA,GAAc,MAAA,CAAO,MAAA,CAAO,IAA+B,CAAA;AACjE,IAAA,IAAI,WAAA,IAAe,MAAA,CAAO,KAAA,GAAQ,WAAA,EAAa;AAC7C,MAAA,UAAA,CAAW,IAAA,CAAK,GAAG,MAAA,CAAO,IAAI,KAAK,MAAA,CAAO,KAAK,CAAA,qBAAA,EAAwB,WAAW,CAAA,EAAA,CAAI,CAAA;AAAA,IACxF;AAAA,EACF,CAAC,CAAA;AAED,EAAA,OAAO;AAAA,IACL,MAAA,EAAQ,WAAW,MAAA,KAAW,CAAA;AAAA,IAC9B;AAAA,GACF;AACF;AAKO,SAAS,+BAAA,CAAgC,OAAA,GAI5C,EAAC,EAAS;AACZ,EAAA,MAAM,EAAE,eAAA,GAAkB,IAAA,EAAM,MAAA,EAAQ,UAAS,GAAI,OAAA;AACrD,EAAA,MAAM,mBAA6B,EAAC;AAEpC,EAAA,gBAAA,CAAiB,CAAC,MAAA,KAAW;AAC3B,IAAA,gBAAA,CAAiB,KAAK,MAAM,CAAA;AAG5B,IAAA,QAAA,GAAW,MAAM,CAAA;AAGjB,IAAA,IAAI,MAAA,EAAQ;AACV,MAAA,MAAM,WAAA,GAAc,sBAAA,CAAuB,CAAC,MAAM,GAAG,MAAM,CAAA;AAC3D,MAAA,IAAI,CAAC,YAAY,MAAA,EAAQ;AACvB,QAAA,OAAA,CAAQ,IAAA,CAAK,+BAAA,EAAiC,WAAA,CAAY,UAAU,CAAA;AAAA,MACtE;AAAA,IACF;AAGA,IAAA,OAAA,CAAQ,KAAA,CAAM,CAAA,EAAG,MAAA,CAAO,IAAI,CAAA,EAAA,EAAK,OAAO,KAAK,CAAA,IAAA,EAAO,MAAA,CAAO,MAAM,CAAA,CAAA,CAAG,CAAA;AAAA,EACtE,CAAC,CAAA;AAGD,EAAA,IAAI,eAAA,EAAiB;AACnB,IAAA,MAAA,CAAO,gBAAA,CAAiB,gBAAgB,MAAM;AAC5C,MAAA,IAAI,gBAAA,CAAiB,SAAS,CAAA,EAAG;AAC/B,QAAA,MAAM,MAAA,GAAS,0BAA0B,gBAAgB,CAAA;AACzD,QAAA,qBAAA,CAAsB,MAAM,CAAA;AAAA,MAC9B;AAAA,IACF,CAAC,CAAA;AAAA,EACH;AACF;AAKO,SAAS,qBAAA,GAAwB;AACtC,EAAA,OAAO,SAAS,wBAAA,CAAyB,OAAA,GAAU,IAAA,EAAM;AAEvD,IAAA,IAAI,OAAO,MAAA,KAAW,WAAA,IAAgB,MAAA,CAAe,OAAO,SAAA,EAAW;AACrE,MAAA,MAAM,QAAS,MAAA,CAAe,KAAA;AAC9B,MAAA,KAAA,CAAM,UAAU,MAAM;AACpB,QAAA,IAAI,CAAC,OAAA,EAAS;AAEd,QAAA,+BAAA,CAAgC;AAAA,UAC9B,eAAA,EAAiB,IAAA;AAAA,UACjB,QAAA,EAAU,CAAC,MAAA,KAAW;AAEpB,YAAA,IAAI,OAAA,CAAQ,GAAA,CAAI,QAAA,KAAa,aAAA,EAAe;AAC1C,cAAA,OAAA,CAAQ,KAAA,CAAM,uBAAuB,MAAM,CAAA;AAAA,YAC7C;AAAA,UACF;AAAA,SACD,CAAA;AAAA,MACH,CAAA,EAAG,CAAC,OAAO,CAAC,CAAA;AAAA,IACd,CAAA,MAAO;AACL,MAAA,OAAA,CAAQ,KAAK,0CAA0C,CAAA;AAAA,IACzD;AAAA,EACF,CAAA;AACF;;;ACzRO,IAAM,cAAc","file":"index.js","sourcesContent":["/**\n * Core Web Vitals and Performance Monitoring Utilities\n * Implements comprehensive performance tracking across all UpCoach applications\n */\n\nexport interface Metric {\n  id: string;\n  name: string;\n  value: number;\n  delta?: number;\n  rating: 'good' | 'needs-improvement' | 'poor';\n  entries?: PerformanceEntry[];\n  navigationType?: string;\n}\n\nexport interface PerformanceReport {\n  timestamp: number;\n  url: string;\n  userAgent: string;\n  connectionType: string;\n  metrics: Metric[];\n  pageLoadTime: number;\n  resourceTimings: ResourceTiming[];\n}\n\ninterface ResourceTiming {\n  name: string;\n  duration: number;\n  size: number;\n  type: string;\n}\n\n// Core Web Vitals thresholds (Google standards)\nconst THRESHOLDS = {\n  FCP: { good: 1800, poor: 3000 }, // First Contentful Paint\n  LCP: { good: 2500, poor: 4000 }, // Largest Contentful Paint\n  CLS: { good: 0.1, poor: 0.25 },  // Cumulative Layout Shift\n  FID: { good: 100, poor: 300 },   // First Input Delay\n  TTFB: { good: 800, poor: 1800 }  // Time to First Byte\n};\n\n/**\n * Get performance rating based on metric value and thresholds\n */\nfunction getPerformanceRating(metricName: string, value: number): 'good' | 'needs-improvement' | 'poor' {\n  const threshold = THRESHOLDS[metricName as keyof typeof THRESHOLDS];\n  if (!threshold) return 'good';\n  \n  if (value <= threshold.good) return 'good';\n  if (value <= threshold.poor) return 'needs-improvement';\n  return 'poor';\n}\n\n/**\n * Measure and report Core Web Vitals\n */\nexport function measureWebVitals(callback: (metric: Metric) => void): void {\n  // Only run in browser environment\n  if (typeof window === 'undefined') return;\n\n  try {\n    // Dynamic import for web-vitals to avoid SSR issues\n    import('web-vitals').then(({ onFCP, onLCP, onCLS, onFID, onTTFB }) => {\n      onFCP((metric) => {\n        callback({\n          id: metric.id,\n          name: 'FCP',\n          value: metric.value,\n          delta: metric.delta,\n          rating: getPerformanceRating('FCP', metric.value),\n          entries: metric.entries,\n          navigationType: metric.navigationType\n        });\n      });\n\n      onLCP((metric) => {\n        callback({\n          id: metric.id,\n          name: 'LCP',\n          value: metric.value,\n          delta: metric.delta,\n          rating: getPerformanceRating('LCP', metric.value),\n          entries: metric.entries,\n          navigationType: metric.navigationType\n        });\n      });\n\n      onCLS((metric) => {\n        callback({\n          id: metric.id,\n          name: 'CLS',\n          value: metric.value,\n          delta: metric.delta,\n          rating: getPerformanceRating('CLS', metric.value),\n          entries: metric.entries,\n          navigationType: metric.navigationType\n        });\n      });\n\n      onFID((metric) => {\n        callback({\n          id: metric.id,\n          name: 'FID',\n          value: metric.value,\n          delta: metric.delta,\n          rating: getPerformanceRating('FID', metric.value),\n          entries: metric.entries,\n          navigationType: metric.navigationType\n        });\n      });\n\n      onTTFB((metric) => {\n        callback({\n          id: metric.id,\n          name: 'TTFB',\n          value: metric.value,\n          delta: metric.delta,\n          rating: getPerformanceRating('TTFB', metric.value),\n          entries: metric.entries,\n          navigationType: metric.navigationType\n        });\n      });\n    }).catch((error) => {\n      console.warn('Failed to load web-vitals library:', error);\n    });\n  } catch (error) {\n    console.warn('Error measuring web vitals:', error);\n  }\n}\n\n/**\n * Collect comprehensive performance report\n */\nexport function generatePerformanceReport(metrics: Metric[]): PerformanceReport {\n  const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n  const resources = performance.getEntriesByType('resource') as PerformanceResourceTiming[];\n  \n  return {\n    timestamp: Date.now(),\n    url: window.location.href,\n    userAgent: navigator.userAgent,\n    connectionType: (navigator as any).connection?.effectiveType || 'unknown',\n    metrics,\n    pageLoadTime: navigation ? navigation.loadEventEnd - navigation.fetchStart : 0,\n    resourceTimings: resources.slice(0, 20).map(resource => ({\n      name: resource.name,\n      duration: resource.duration,\n      size: resource.transferSize || 0,\n      type: getResourceType(resource.name)\n    }))\n  };\n}\n\n/**\n * Get resource type from URL\n */\nfunction getResourceType(url: string): string {\n  if (url.includes('.css')) return 'stylesheet';\n  if (url.includes('.js')) return 'script';\n  if (url.match(/\\.(jpg|jpeg|png|gif|webp|svg)$/)) return 'image';\n  if (url.includes('.woff') || url.includes('.woff2')) return 'font';\n  return 'other';\n}\n\n/**\n * Send performance data to analytics endpoint\n */\nexport async function reportPerformanceData(report: PerformanceReport): Promise<void> {\n  try {\n    // Use beacon API for reliable delivery\n    if ('sendBeacon' in navigator) {\n      navigator.sendBeacon('/api/analytics/performance', JSON.stringify(report));\n    } else {\n      // Fallback to fetch\n      await fetch('/api/analytics/performance', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(report),\n        keepalive: true\n      });\n    }\n  } catch (error) {\n    console.warn('Failed to report performance data:', error);\n  }\n}\n\n/**\n * Performance budget checker\n */\nexport interface PerformanceBudget {\n  FCP: number;\n  LCP: number;\n  CLS: number;\n  FID: number;\n  TTFB: number;\n}\n\nconst DEFAULT_BUDGET: PerformanceBudget = {\n  FCP: 1800,\n  LCP: 2500,\n  CLS: 0.1,\n  FID: 100,\n  TTFB: 800\n};\n\nexport function checkPerformanceBudget(\n  metrics: Metric[], \n  budget: PerformanceBudget = DEFAULT_BUDGET\n): { passed: boolean; violations: string[] } {\n  const violations: string[] = [];\n  \n  metrics.forEach(metric => {\n    const budgetValue = budget[metric.name as keyof PerformanceBudget];\n    if (budgetValue && metric.value > budgetValue) {\n      violations.push(`${metric.name}: ${metric.value}ms exceeds budget of ${budgetValue}ms`);\n    }\n  });\n  \n  return {\n    passed: violations.length === 0,\n    violations\n  };\n}\n\n/**\n * Initialize performance monitoring for an application\n */\nexport function initializePerformanceMonitoring(options: {\n  enableReporting?: boolean;\n  budget?: PerformanceBudget;\n  onMetric?: (metric: Metric) => void;\n} = {}): void {\n  const { enableReporting = true, budget, onMetric } = options;\n  const collectedMetrics: Metric[] = [];\n  \n  measureWebVitals((metric) => {\n    collectedMetrics.push(metric);\n    \n    // Call custom metric handler\n    onMetric?.(metric);\n    \n    // Check budget if provided\n    if (budget) {\n      const budgetCheck = checkPerformanceBudget([metric], budget);\n      if (!budgetCheck.passed) {\n        console.warn('Performance budget violation:', budgetCheck.violations);\n      }\n    }\n    \n    // Log metric for debugging\n    console.debug(`${metric.name}: ${metric.value}ms (${metric.rating})`);\n  });\n  \n  // Send report when page unloads\n  if (enableReporting) {\n    window.addEventListener('beforeunload', () => {\n      if (collectedMetrics.length > 0) {\n        const report = generatePerformanceReport(collectedMetrics);\n        reportPerformanceData(report);\n      }\n    });\n  }\n}\n\n/**\n * Create performance monitoring hook for React applications\n */\nexport function createPerformanceHook() {\n  return function usePerformanceMonitoring(enabled = true) {\n    // Use lazy React import to avoid dependency issues\n    if (typeof window !== 'undefined' && (window as any).React?.useEffect) {\n      const React = (window as any).React;\n      React.useEffect(() => {\n        if (!enabled) return;\n        \n        initializePerformanceMonitoring({\n          enableReporting: true,\n          onMetric: (metric) => {\n            // Could integrate with React DevTools or state management\n            if (process.env.NODE_ENV === 'development') {\n              console.debug('Performance metric:', metric);\n            }\n          }\n        });\n      }, [enabled]);\n    } else {\n      console.warn('React not available for performance hook');\n    }\n  };\n}","/**\n * Shared utilities index\n */\n\n// Performance monitoring utilities\nexport * from './performance';\n\n// Placeholder for additional shared utilities\nexport const SharedUtils = {};\n"]}