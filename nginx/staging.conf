user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging with staging identifier
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'env=staging';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations (reduced for staging)
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 50;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 4;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml;

    # Security headers (relaxed for staging)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Environment "staging" always;

    # Rate limiting (relaxed for staging)
    limit_req_zone $binary_remote_addr zone=api_staging:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=auth_staging:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general_staging:10m rate=50r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=perip_staging:10m;
    limit_conn perip_staging 20;

    # Backend upstream
    upstream backend_servers {
        server backend:8080 max_fails=2 fail_timeout=30s;
        keepalive 8;
    }

    # Admin Panel upstream
    upstream admin_servers {
        server admin-panel:80 max_fails=2 fail_timeout=30s;
    }

    # Landing Page upstream
    upstream landing_servers {
        server landing-page:3000 max_fails=2 fail_timeout=30s;
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name localhost staging.upcoach.ai *.staging.upcoach.ai;
        return 301 https://$server_name$request_uri;
    }

    # Main HTTPS server block
    server {
        listen 443 ssl http2;
        server_name localhost staging.upcoach.ai *.staging.upcoach.ai;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/staging.upcoach.ai.crt;
        ssl_certificate_key /etc/nginx/ssl/staging.upcoach.ai.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Landing page (root)
        location / {
            proxy_pass http://landing_servers;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Environment "staging";
            
            limit_req zone=general_staging burst=20 nodelay;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API routes
        location /api {
            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Environment "staging";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Rate limiting based on endpoint
            limit_req zone=api_staging burst=30 nodelay;
        }

        # Auth routes (stricter rate limiting)
        location /api/auth {
            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Environment "staging";
            
            limit_req zone=auth_staging burst=5 nodelay;
        }

        # Admin Panel
        location /admin {
            proxy_pass http://admin_servers;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Environment "staging";
            
            limit_req zone=general_staging burst=20 nodelay;
        }

        # WebSocket support
        location /ws {
            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Environment "staging";
            
            # WebSocket timeouts
            proxy_connect_timeout 1h;
            proxy_send_timeout 1h;
            proxy_read_timeout 1h;
        }

        # Health checks
        location /health {
            access_log off;
            proxy_pass http://backend_servers/api/health;
            proxy_set_header X-Environment "staging";
        }

        # Admin health check
        location /admin/health {
            access_log off;
            proxy_pass http://admin_servers;
        }

        # Landing health check
        location /landing/health {
            access_log off;
            proxy_pass http://landing_servers;
        }

        # Nginx status for monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 172.16.0.0/12;  # Docker networks
            allow 127.0.0.1;
            deny all;
        }
    }

    # Monitoring server (Grafana)
    server {
        listen 3001;
        server_name localhost;

        # Grafana dashboard
        location / {
            proxy_pass http://grafana:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check
        location /health {
            access_log off;
            return 200 "monitoring healthy\n";
        }
    }

    # Prometheus metrics
    server {
        listen 9091;
        server_name localhost;

        location / {
            proxy_pass http://prometheus:9090;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}