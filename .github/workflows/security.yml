name: Security Testing Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ==========================================
  # SAST - Static Application Security Testing
  # ==========================================
  
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript', 'python']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
          config-file: ./.github/codeql/codeql-config.yml
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
  
  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    
    steps:
      - uses: actions/checkout@v4
      
      - run: |
          semgrep ci --config=auto \
            --config=p/security-audit \
            --config=p/secrets \
            --config=p/owasp-top-ten \
            --config=p/nodejs \
            --config=p/typescript \
            --config=p/react \
            --sarif --output=semgrep.sarif \
            || true
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always()
  
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: |
          cd services/api && npm ci || npm install
          cd ../../apps/admin-panel && npm ci || npm install
          cd ../cms-panel && npm ci || npm install
        continue-on-error: true
      
      - name: Run tests with coverage
        run: |
          npm run test:coverage --prefix backend || true
          npm run test:coverage --prefix admin-panel || true
          npm run test:coverage --prefix cms-panel || true
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  # ==========================================
  # Dependency Vulnerability Scanning
  # ==========================================
  
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'UpCoach'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --log dependency-check.log
      
      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/
        if: always()
  
  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - project: services/api
            name: api
          - project: apps/admin-panel
            name: admin-panel
          - project: apps/cms-panel
            name: cms-panel
          - project: apps/landing-page
            name: landing-page

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit
        run: |
          if [ -f "${{ matrix.project }}/package.json" ]; then
            cd ${{ matrix.project }}
            npm audit --audit-level=moderate --json > npm-audit.json || true
          else
            echo "Package.json not found in ${{ matrix.project }}"
            echo '{"metadata":{"vulnerabilities":{"critical":0,"high":0}}}' > npm-audit.json
          fi
        continue-on-error: true
          
      - name: Upload audit results
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-${{ matrix.project }}
          path: ${{ matrix.project }}/npm-audit.json
      
      - name: Check for critical vulnerabilities
        run: |
          cd ${{ matrix.project }}
          CRITICAL=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "Critical or high vulnerabilities found!"
            cat npm-audit.json | jq '.vulnerabilities'
            exit 1
          fi
  
  snyk:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [backend, admin-panel, cms-panel]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: npm ci --prefix ${{ matrix.project }}
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=${{ matrix.project }}/package.json
  
  # ==========================================
  # Container Security Scanning
  # ==========================================
  
  trivy-scan:
    name: Trivy Container Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, admin-panel, cms-panel]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t upcoach-${{ matrix.service }}:${{ github.sha }} \
            -f docker/${{ matrix.service }}.Dockerfile .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: upcoach-${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
      
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        if: always()
  
  # ==========================================
  # Secret Scanning
  # ==========================================
  
  gitleaks:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Gitleaks results
        uses: actions/upload-artifact@v3
        with:
          name: gitleaks-report
          path: results.sarif
        if: failure()
  
  trufflehog:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
  
  # ==========================================
  # Infrastructure as Code Security
  # ==========================================
  
  checkov:
    name: Checkov IaC Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true
          soft_fail: false
          framework: all
          output_format: sarif
          output_file_path: checkov.sarif
          download_external_modules: true
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov.sarif
        if: always()
  
  # ==========================================
  # License Compliance Check
  # ==========================================
  
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install license-checker
        run: npm install -g license-checker
      
      - name: Check licenses
        run: |
          for dir in backend admin-panel cms-panel landing-page; do
            echo "Checking licenses for $dir..."
            cd $dir
            license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD;ISC;MPL-2.0;CC0-1.0;Unlicense' \
              --excludePrivatePackages --csv > ../licenses-$dir.csv || true
            cd ..
          done
      
      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: licenses-*.csv
  
  # ==========================================
  # Security Report Generation
  # ==========================================
  
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [
      codeql-analysis,
      semgrep,
      dependency-check,
      npm-audit,
      trivy-scan,
      gitleaks,
      license-check
    ]
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: security-artifacts
      
      - name: Generate consolidated report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "**Date:** $(date)" >> security-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Summary" >> security-report.md
          echo "| Check | Status |" >> security-report.md
          echo "|-------|--------|" >> security-report.md
          
          # Add status of each job
          for job in codeql-analysis semgrep dependency-check npm-audit trivy-scan gitleaks license-check; do
            if [ "${{ needs[${job}].result }}" == "success" ]; then
              echo "| ${job} | ✅ Passed |" >> security-report.md
            elif [ "${{ needs[${job}].result }}" == "failure" ]; then
              echo "| ${job} | ❌ Failed |" >> security-report.md
            else
              echo "| ${job} | ⚠️ Skipped |" >> security-report.md
            fi
          done
          
          echo "" >> security-report.md
          echo "## Detailed Results" >> security-report.md
          echo "See artifacts for detailed reports from each security tool." >> security-report.md
      
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-summary-report
          path: security-report.md
      
      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });