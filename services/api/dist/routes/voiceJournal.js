"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const express_1 = require("express");
const auth_1 = require("../middleware/auth");
const upload_1 = tslib_1.__importDefault(require("../middleware/upload"));
const VoiceJournalController_1 = require("../controllers/VoiceJournalController");
const router = (0, express_1.Router)();
router.use(auth_1.authenticate);
router.get('/entries', VoiceJournalController_1.voiceJournalController.getEntries);
router.get('/entries/:id', VoiceJournalController_1.voiceJournalController.getEntry);
router.post('/entries', VoiceJournalController_1.voiceJournalController.createEntry);
router.put('/entries/:id', VoiceJournalController_1.voiceJournalController.updateEntry);
router.delete('/entries/:id', VoiceJournalController_1.voiceJournalController.deleteEntry);
router.post('/entries/batch', VoiceJournalController_1.voiceJournalController.batchCreateEntries);
router.put('/entries/batch', VoiceJournalController_1.voiceJournalController.batchUpdateEntries);
router.post('/upload-audio', upload_1.default.single('audio'), VoiceJournalController_1.voiceJournalController.uploadAudio);
router.get('/download-audio/:id', VoiceJournalController_1.voiceJournalController.downloadAudio);
router.delete('/audio/:id', VoiceJournalController_1.voiceJournalController.deleteAudio);
router.post('/sync', VoiceJournalController_1.voiceJournalController.performSync);
router.get('/sync/changes', VoiceJournalController_1.voiceJournalController.getChanges);
router.post('/sync/resolve-conflict', VoiceJournalController_1.voiceJournalController.resolveConflict);
router.post('/sync-metadata', VoiceJournalController_1.voiceJournalController.updateSyncMetadata);
router.get('/analytics', VoiceJournalController_1.voiceJournalController.getAnalytics);
router.get('/insights', VoiceJournalController_1.voiceJournalController.getInsights);
router.post('/analyze/:id', VoiceJournalController_1.voiceJournalController.analyzeEntry);
router.get('/search', VoiceJournalController_1.voiceJournalController.searchEntries);
router.get('/tags', VoiceJournalController_1.voiceJournalController.getTags);
router.get('/favorites', VoiceJournalController_1.voiceJournalController.getFavorites);
router.get('/export', VoiceJournalController_1.voiceJournalController.exportEntries);
router.post('/import', upload_1.default.single('file'), VoiceJournalController_1.voiceJournalController.importEntries);
router.post('/offline/store', upload_1.default.single('audioFile'), VoiceJournalController_1.voiceJournalController.storeOfflineEntry);
router.get('/offline/entries', VoiceJournalController_1.voiceJournalController.getOfflineEntries);
router.post('/offline/sync', VoiceJournalController_1.voiceJournalController.syncOfflineEntries);
router.post('/local/audio/:entryId', upload_1.default.single('audio'), VoiceJournalController_1.voiceJournalController.storeAudioFileLocal);
router.get('/local/audio/:entryId', VoiceJournalController_1.voiceJournalController.getAudioFileLocal);
router.post('/cache/store', VoiceJournalController_1.voiceJournalController.cacheEntriesLocally);
router.get('/cache/entries', VoiceJournalController_1.voiceJournalController.getCachedEntries);
router.get('/storage/status', VoiceJournalController_1.voiceJournalController.getLocalStorageStatus);
router.delete('/storage/purge', VoiceJournalController_1.voiceJournalController.purgeOldData);
router.post('/sync/advanced', VoiceJournalController_1.voiceJournalController.performAdvancedSync);
exports.default = router;
