# Production Hardened Docker Compose Configuration
# Security-first approach with minimal attack surface

version: '3.8'

services:
  # Hardened PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: upcoach-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - db-network
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    user: postgres
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/postgresql:noexec,nosuid,size=100m
    sysctls:
      - net.core.somaxconn=1024
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    command: |
      postgres
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/server.crt
      -c ssl_key_file=/var/lib/postgresql/server.key
      -c log_connections=on
      -c log_disconnections=on
      -c log_statement=all
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Hardened Redis Cache
  redis:
    image: redis:7-alpine
    container_name: upcoach-redis-prod
    restart: unless-stopped
    networks:
      - cache-network
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    user: redis
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    command: |
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
      --bind 0.0.0.0
      --protected-mode yes
      --disable-thp yes
    volumes:
      - redis_data:/data:rw
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Hardened API Service
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    container_name: upcoach-api-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=require
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      MASTER_KEY: ${MASTER_KEY}
      # Security Headers
      HELMET_ENABLED: true
      CSP_ENABLED: true
      HSTS_ENABLED: true
      # Rate Limiting
      RATE_LIMIT_ENABLED: true
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      # Audit & Monitoring
      AUDIT_LOGGING_ENABLED: true
      SECURITY_MONITORING_ENABLED: true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
      - db-network
      - cache-network
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    user: node
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/tmp:noexec,nosuid,size=100m
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    ulimits:
      nproc: 1024
      nofile: 4096
    sysctls:
      - net.core.somaxconn=1024
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Hardened Frontend Services (Admin Panel)
  admin-panel:
    build:
      context: ./apps/admin-panel
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    container_name: upcoach-admin-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_URL: https://api.upcoach.ai
      VITE_APP_URL: https://admin.upcoach.ai
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    user: nginx
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/cache/nginx:noexec,nosuid,size=100m
      - /var/run:noexec,nosuid,size=100m
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Secure Reverse Proxy with Traefik
  traefik:
    image: traefik:v3.0
    container_name: upcoach-traefik-prod
    restart: unless-stopped
    command:
      - "--api.dashboard=false"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=app-network"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--global.sendanonymoususage=false"
      - "--log.level=WARN"
      - "--accesslog=true"
      - "--accesslog.format=json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--serverstransport.insecureskipverify=false"
      - "--entrypoints.websecure.http.tls.options=modern@file"
      - "--entrypoints.websecure.http.tls.certResolver=letsencrypt"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt:rw
      - ./traefik/tls.yml:/etc/traefik/dynamic/tls.yml:ro
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    user: traefik
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    labels:
      - "traefik.enable=true"
      # Global HTTPS redirect
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
      # Security headers middleware
      - "traefik.http.middlewares.security-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.security-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.security-headers.headers.stsincludesubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stspreload=true"
      - "traefik.http.middlewares.security-headers.headers.stsseconds=31536000"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.referrerPolicy=strict-origin-when-cross-origin"
      - "traefik.http.middlewares.security-headers.headers.featurePolicy=accelerometer 'none'; camera 'none'; geolocation 'none'; gyroscope 'none'; magnetometer 'none'; microphone 'none'; payment 'self'; usb 'none'"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Security Monitoring with Fail2Ban
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: upcoach-fail2ban-prod
    restart: unless-stopped
    environment:
      TZ: UTC
      F2B_LOG_LEVEL: INFO
      F2B_DB_PURGE_AGE: 1d
      F2B_MAX_RETRY: 3
      F2B_DEST_EMAIL: ${SECURITY_EMAIL}
    volumes:
      - ./fail2ban/jail.local:/data/jail.d/jail.local:ro
      - ./fail2ban/filter.d:/data/filter.d:ro
      - /var/log:/var/log:ro
      - fail2ban_data:/data
    networks:
      - monitoring-network
    security_opt:
      - no-new-privileges:true
    cap_add:
      - NET_ADMIN
      - NET_RAW
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Log Management with Fluent Bit
  fluent-bit:
    image: fluent/fluent-bit:2.2
    container_name: upcoach-logging-prod
    restart: unless-stopped
    volumes:
      - ./logging/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    networks:
      - monitoring-network
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    user: fluent-bit
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Hardened Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: upcoach-prometheus-prod
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
      - prometheus_data:/prometheus:rw
    networks:
      - monitoring-network
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    user: prometheus
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://prometheus.upcoach.ai'
      - '--storage.tsdb.retention.size=50GB'
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Secure Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: upcoach-grafana-prod
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: true
      GF_SECURITY_STRICT_TRANSPORT_SECURITY_MAX_AGE_SECONDS: 86400
      GF_SECURITY_CONTENT_TYPE_OPTIONS: true
      GF_SECURITY_X_CONTENT_TYPE_OPTIONS: nosniff
      GF_SECURITY_X_XSS_PROTECTION: true
      GF_AUTH_ANONYMOUS_ENABLED: false
      GF_SNAPSHOTS_EXTERNAL_ENABLED: false
      GF_USERS_ALLOW_SIGN_UP: false
      GF_USERS_ALLOW_ORG_CREATE: false
      GF_AUTH_DISABLE_LOGIN_FORM: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana:rw
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - monitoring-network
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    user: grafana
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/lib/grafana/dashboards:noexec,nosuid,size=100m
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

networks:
  # Segmented networks for security isolation
  app-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: upcoach-app
    ipam:
      config:
        - subnet: 172.20.0.0/24

  db-network:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.name: upcoach-db
    ipam:
      config:
        - subnet: 172.21.0.0/24

  cache-network:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.name: upcoach-cache
    ipam:
      config:
        - subnet: 172.22.0.0/24

  monitoring-network:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.name: upcoach-monitoring
    ipam:
      config:
        - subnet: 172.23.0.0/24

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /opt/upcoach/data/postgres
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: /opt/upcoach/data/redis
      o: bind
  letsencrypt_data:
    driver: local
    driver_opts:
      type: none
      device: /opt/upcoach/data/letsencrypt
      o: bind
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      device: /opt/upcoach/data/prometheus
      o: bind
  grafana_data:
    driver: local
    driver_opts:
      type: none
      device: /opt/upcoach/data/grafana
      o: bind
  fail2ban_data:
    driver: local
    driver_opts:
      type: none
      device: /opt/upcoach/data/fail2ban
      o: bind