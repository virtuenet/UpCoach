# Optimized Backend Dockerfile with multi-stage build
ARG NODE_VERSION=20-alpine

# Stage 1: Dependencies
FROM node:${NODE_VERSION} AS deps
WORKDIR /app

# Copy package files
COPY apps/backend/package*.json ./
COPY packages/*/package*.json ./packages/
COPY package*.json turbo.json ./

# Install production dependencies with cache
RUN --mount=type=cache,target=/root/.npm \
    npm ci --only=production

# Stage 2: Builder
FROM node:${NODE_VERSION} AS builder
WORKDIR /app

# Copy package files and install all dependencies
COPY apps/backend/package*.json ./apps/backend/
COPY packages/*/package*.json ./packages/
COPY package*.json turbo.json ./

RUN --mount=type=cache,target=/root/.npm \
    npm ci

# Copy source code
COPY apps/backend ./apps/backend
COPY packages ./packages

# Build the application
RUN npm run build --workspace=@upcoach/backend

# Stage 3: Runner
FROM node:${NODE_VERSION} AS runner
WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy production dependencies
COPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=deps --chown=nodejs:nodejs /app/packages ./packages

# Copy built application
COPY --from=builder --chown=nodejs:nodejs /app/apps/backend/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/apps/backend/package*.json ./

# Set environment
ENV NODE_ENV=production
ENV PORT=8080

# Use non-root user
USER nodejs

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:8080/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)})"

# Start with dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"]